language: c++

os:
  - linux
  - osx

compiler:
  - clang
  - gcc

env:
  - CFLAGS_EXTRA_M=
  - CFLAGS_EXTRA_M=-m32
      CONF_ASSERTIONS=--enable-gc-assertions
  - CONF_GCOV=--enable-gcov
  - CONF_GC_DEBUG=--enable-gc-debug
  - CONF_GC_DEBUG=--disable-gc-debug
  - CONF_LARGE_CONFIG=--enable-large-config
  - CONF_STATIC=--disable-static
      CONF_THREADS=--disable-threads
      CFLAGS_EXTRA="-O3 -march=native"
  - CSA_CHECK=true

matrix:
  exclude:
  - os: osx
    compiler: gcc
  - compiler: clang
    env: CONF_GCOV=--enable-gcov
  - compiler: clang
    env: CONF_GC_DEBUG=--enable-gc-debug
  - compiler: clang
    env: CONF_GC_DEBUG=--disable-gc-debug
  - compiler: gcc
    env: CONF_LARGE_CONFIG=--enable-large-config
  - compiler: clang
    env: CSA_CHECK=true

sudo: required

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$CFLAGS_EXTRA_M" == "-m32" ]]; then
      sudo apt-get install gcc-multilib;
    else
      CONF_CPP=--enable-cplusplus;
    fi
  - if [[ "$CONF_GCOV" == --en* ]]; then
      sudo apt-get install lcov;
      gem install coveralls-lcov;
      CONF_ASSERTIONS=--enable-gc-assertions;
      CONF_M_UNMAP=--enable-munmap;
      CONF_SHARED=--disable-shared;
      CONF_SINGLE_OBJ=--enable-single-obj-compilation;
      CFLAGS_EXTRA="-DLINT2";
    fi

install:
  - git clone --depth=50 https://github.com/ivmai/libatomic_ops.git
  - ./autogen.sh

script:
  - if [[ "$CSA_CHECK" != true ]]; then
      ./configure $CONF_ASSERTIONS $CONF_CPP $CONF_GCOV $CONF_GC_DEBUG
                $CONF_LARGE_CONFIG $CONF_M_UNMAP $CONF_SHARED
                $CONF_SINGLE_OBJ $CONF_STATIC $CONF_THREADS --enable-werror;
  - if [[ "$CSA_CHECK" != true ]]; then
      make -j check CFLAGS_EXTRA="$CFLAGS_EXTRA $CFLAGS_EXTRA_M";
    fi
  - if [[ "$CSA_CHECK" == true ]]; then
      clang --analyze -Xanalyzer -analyzer-output=text
            -m32 -Werror -I include -I libatomic_ops/src
            *.c *.cc cord/*.c cord/tests/cordtest.c cord/tests/de.c extra/gc.c
            extra/msvc_dbg.c tests/*.c tests/*.cc tools/*.c &&
      clang --analyze -Xanalyzer -analyzer-output=text
            -Werror -I include -I libatomic_ops/src
            -D ALL_INTERIOR_POINTERS -D CHECKSUMS -D DBG_HDRS_ALL
            -D DEBUG_THREADS -D ENABLE_TRACE -D GC_ALWAYS_MULTITHREADED
            -D GC_ASSERTIONS -D GC_ATOMIC_UNCOLLECTABLE
            -D GC_ENABLE_SUSPEND_THREAD -D GC_GCJ_SUPPORT
            -D GC_PRINT_BACK_HEIGHT -D GC_THREADS -D HANDLE_FORK
            -D JAVA_FINALIZATION -DK EEP_BACK_PTRS -D MAKE_BACK_GRAPH
            -D PARALLEL_MARK -D PRINT_BLACK_LIST -D THREAD_LOCAL_ALLOC
            -D USE_MMAP -D USE_MUNMAP
            *.c *.cc cord/*.c cord/tests/cordtest.c cord/tests/de.c extra/gc.c
            extra/msvc_dbg.c tests/*.c tests/*.cc tools/*.c;
    fi

after_success:
  - if [[ "$CONF_GCOV" == --en* ]]; then
      lcov --capture --base-directory . --directory . --output-file coverage.info;
      lcov --remove coverage.info '/usr/*' 'cord/tests/*' 'libatomic_ops/*' 'tests/*' --output-file coverage.info;
      lcov --list coverage.info;
      coveralls-lcov --repo-token ${COVERALLS_TOKEN} coverage.info;
    fi
